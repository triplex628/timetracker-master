# Generated by Django 4.2.7 on 2023-12-17 13:07

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="AdminModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Имя")),
                ("surname", models.CharField(max_length=255, verbose_name="Фамилия")),
                (
                    "patronymic",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Отчество"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Администраторы",
                "ordering": ["surname", "name", "patronymic"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="EmployeeModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Имя")),
                ("surname", models.CharField(max_length=255, verbose_name="Фамилия")),
                (
                    "patronymic",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Отчество"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Работники",
                "ordering": ["surname", "name", "patronymic"],
            },
        ),
        migrations.CreateModel(
            name="EmployeeTaskModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_paused", models.BooleanField(default=False)),
                ("is_finished", models.BooleanField(default=False)),
                ("is_started", models.BooleanField(default=False)),
                (
                    "total_time",
                    models.DurationField(
                        default=datetime.timedelta(0), verbose_name="Суммарное время"
                    ),
                ),
                (
                    "employee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="employee_tracking_tasks",
                        to="api.employeemodel",
                        verbose_name="Работник",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Задачи работников",
            },
        ),
        migrations.CreateModel(
            name="ItemModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=1000, verbose_name="Название прибора"),
                ),
                (
                    "seria",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Серия прибора",
                    ),
                ),
                (
                    "types_of_work",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Сейсморазведка", "Сейсморазведка"),
                            (
                                "Вспомогательное оборудование",
                                "Вспомогательное оборудование",
                            ),
                            ("Электроразведка", "Электроразведка"),
                            ("Магниторазведка", "Магниторазведка"),
                            ("Радиометрия", "Радиометрия"),
                            ("Нестандартные изделия", "Нестандартные изделия"),
                        ],
                        max_length=1000,
                        null=True,
                        verbose_name="Тип работы",
                    ),
                ),
                (
                    "subtypes_of_work",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "Сейсмостанция, используемая с комплектом",
                                "Сейсмостанция, используемая с комплектом",
                            ),
                            ("Накопители", "Накопители"),
                            ("Источники", "Источники"),
                            ("Приемники", "Приемники"),
                            ("Палубные лебедки", "Палубные лебедки"),
                            ("Скважинные лебёдки", "Скважинные лебёдки"),
                            ("Палубные катушки", "Палубные катушки"),
                            ("Геофизические катушки", "Геофизические катушки"),
                            (
                                "Прочее вспомогательное оборудование",
                                "Прочее вспомогательное оборудование",
                            ),
                            ("Акваторные магнитометры", "Акваторные магнитометры"),
                            ("АЭРО магнитометры", "АЭРО магнитометры"),
                            ("Наземные магнитометры", "Наземные магнитометры"),
                            (
                                "Прочее оборудование магниторазведки",
                                "Прочее оборудование магниторазведки",
                            ),
                            (
                                "СРП-20 сцинтилляционный радиометр",
                                "СРП-20 сцинтилляционный радиометр",
                            ),
                            (
                                "Электроразведочная станция с которой используется оборудование",
                                "Электроразведочная станция с которой используется оборудование",
                            ),
                            (
                                "Электроразведочные комплексы",
                                "Электроразведочные комплексы",
                            ),
                            (
                                "Усиленная герметичная коса для электротомографии каналы/кол-во разъемов",
                                "Усиленная герметичная коса для электротомографии каналы/кол-во разъемов",
                            ),
                            (
                                "Морская электроразведочная коса",
                                "Морская электроразведочная коса",
                            ),
                            (
                                "Прочее оборудование эектроразведки",
                                "Прочее оборудование эектроразведки",
                            ),
                        ],
                        max_length=1000,
                        null=True,
                        verbose_name="Подтип работы",
                    ),
                ),
                (
                    "category_of_item",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Акваторные накопители", "Акваторные накопители"),
                            ("Скважинные накопители", "Скважинные накопители"),
                            ("Акваторные источники", "Акваторные источники"),
                            ("Скважинные источники", "Скважинные источники"),
                            ("Наземные источники", "Наземные источники"),
                            ("Акваторные приемники", "Акваторные приемники"),
                            ("Скаважинные приемники", "Скаважинные приемники"),
                            (
                                "Наземные сейсмические приемники",
                                "Наземные сейсмические приемники",
                            ),
                            ("Палубные лебёдки для кос", "Палубные лебёдки для кос"),
                            (
                                "Палубные лебёдки высоковольтные",
                                "Палубные лебёдки высоковольтные",
                            ),
                            ("Палубные катушки для кос", "Палубные катушки для кос"),
                            (
                                "Палубные катушки высоковольтные",
                                "Палубные катушки высоковольтные",
                            ),
                            (
                                "КТ-1 Универсальная геофизическая катушка",
                                "КТ-1 Универсальная геофизическая катушка",
                            ),
                            (
                                "КТ-3C Универсальная катушка",
                                "КТ-3C Универсальная катушка",
                            ),
                            (
                                "КТ-4C Геофизическая катушка",
                                "КТ-4C Геофизическая катушка",
                            ),
                            (
                                "КТ-5C Геофизическая катушка",
                                "КТ-5C Геофизическая катушка",
                            ),
                            (
                                "Антенны (магнитные датчики ARMT-5)",
                                "Антенны (магнитные датчики ARMT-5)",
                            ),
                            ("Коммутаторы", "Коммутаторы"),
                            (
                                "Удлинители, коннектора, соединители",
                                "Удлинители, коннектора, соединители",
                            ),
                            ("Электроды", "Электроды"),
                            ("Сумки, ящики", "Сумки, ящики"),
                        ],
                        max_length=1000,
                        null=True,
                        verbose_name="Категория прибора",
                    ),
                ),
                (
                    "subcategory_of_item",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "Морские электроискровые источники SWS и VSWS",
                                "Морские электроискровые источники SWS и VSWS",
                            ),
                            (
                                "Пресноводные электроискровые источники FWS",
                                "Вспомогательное оборудование",
                            ),
                            (
                                "Заглубляемые электроискровые источники DWS",
                                "Заглубляемые электроискровые источники DWS",
                            ),
                            (
                                "Электродинамические источники G-Boomer",
                                "Электродинамические источники G-Boomer",
                            ),
                            (
                                "Высоковольтная коаксиальная кабельная линия источника плавающая",
                                "Высоковольтная коаксиальная кабельная линия источника плавающая",
                            ),
                            (
                                "Высоковольтная коаксиальная кабельная линия источника палубная",
                                "Высоковольтная коаксиальная кабельная линия источника палубная",
                            ),
                            (
                                "Электроискровой скважинный источник",
                                "Электроискровой скважинный источник",
                            ),
                            (
                                "Элекродинамический скважинный источник",
                                "Элекродинамический скважинный источник",
                            ),
                            ("Механизированниые молоты", "Механизированниые молоты"),
                            ("Кувалды", "Кувалды"),
                            ("Сейсморужья", "Сейсморужья"),
                            (
                                "WellStreamer Гидрофонная коса",
                                "WellStreamer Гидрофонная коса",
                            ),
                            (
                                "GStreamer 3С скважиннный сейсмический  зонд",
                                "GStreamer 3С скважиннный сейсмический  зонд",
                            ),
                            (
                                "GStreamer-E скважинный 3С сейсмический зонд с механизированным прижимом",
                                "GStreamer-E скважинный 3С сейсмический зонд с механизированным прижимом",
                            ),
                            (
                                "GStreamer-P скважинный 3С сейсмический зонд с пневмоприжимом",
                                "GStreamer-P скважинный 3С сейсмический зонд с пневмоприжимом",
                            ),
                        ],
                        max_length=1000,
                        null=True,
                        verbose_name="Подкатегория прибора",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Детали",
                "ordering": ["title"],
            },
        ),
        migrations.CreateModel(
            name="PlotModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="Название")),
            ],
            options={
                "verbose_name_plural": "Участки",
            },
        ),
        migrations.CreateModel(
            name="TrackingTaskModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_time",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Время начала"
                    ),
                ),
                (
                    "end_time",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Время окончания"
                    ),
                ),
                (
                    "employee_task",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.employeetaskmodel",
                        verbose_name="Задача работника",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Отслеживаемые задачи",
            },
        ),
        migrations.CreateModel(
            name="TaskModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="Название")),
                (
                    "admin_comment",
                    models.TextField(verbose_name="Комментарий администратора"),
                ),
                (
                    "employee_comment",
                    models.TextField(null=True, verbose_name="Комментарий работника"),
                ),
                (
                    "type_of_task",
                    models.CharField(
                        choices=[
                            ("batch_production", "Произвести"),
                            ("testing", "Тестирование"),
                            ("repair", "Ремонт"),
                            ("shipments", "Отгрузки"),
                            ("other", "Прочее"),
                        ],
                        max_length=255,
                        verbose_name="Тип работы",
                    ),
                ),
                (
                    "is_available",
                    models.BooleanField(
                        blank=True, default=True, verbose_name="Статус задачи"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Создатель",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.itemmodel",
                        verbose_name="Прибор",
                    ),
                ),
                (
                    "plot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.plotmodel",
                        verbose_name="Участок",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Задачи",
            },
        ),
        migrations.AddField(
            model_name="employeetaskmodel",
            name="task",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="task_tracking_tasks",
                to="api.taskmodel",
                verbose_name="Задача",
            ),
        ),
        migrations.AddField(
            model_name="employeemodel",
            name="plot",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="api.plotmodel",
                verbose_name="Участок",
            ),
        ),
    ]
